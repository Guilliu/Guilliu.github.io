{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Pyken - Scorecard development with Python Pyken is a Python package with the aim of providing the necessary tools for: Grouping variables (both numerical and categorical) in an automatic and interactive way. Development of highly customizable scorecards adaptable to the requirements of each user. Source code Check out the GitHub repository. Installation You can install Pyken using pip pip install pyken","title":"Intro"},{"location":"#pyken-scorecard-development-with-python","text":"Pyken is a Python package with the aim of providing the necessary tools for: Grouping variables (both numerical and categorical) in an automatic and interactive way. Development of highly customizable scorecards adaptable to the requirements of each user.","title":"Pyken - Scorecard development with Python"},{"location":"#source-code","text":"Check out the GitHub repository.","title":"Source code"},{"location":"#installation","text":"You can install Pyken using pip pip install pyken","title":"Installation"},{"location":"theory/","text":"En este notebook se muestra la clase scorecard aplicada en un dataset de juguete de Kaggle. En este dataset la variable objetivo est\u00e1 muy correlada con el resto de variables Importamos los m\u00f3dulos import numpy as np, pandas as pd, pyken as pk Cargamos el dataset separando las variables predictoras (guardadas en X) de la variable objetivo (guardada en y) from sklearn.datasets import load_breast_cancer X, y = pd.DataFrame(load_breast_cancer().data, columns=load_breast_cancer().feature_names), load_breast_cancer().target print('El dataset tiene {} filas y {} columnas (sin incluir el target)'.format(X.shape[0], X.shape[1])) El dataset tiene 569 filas y 30 columnas (sin incluir el target) Echamos un vistazo al dataset X[X.columns[:10]].head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } mean radius mean texture mean perimeter mean area mean smoothness mean compactness mean concavity mean concave points mean symmetry mean fractal dimension 0 17.99 10.38 122.80 1001.0 0.11840 0.27760 0.3001 0.14710 0.2419 0.07871 1 20.57 17.77 132.90 1326.0 0.08474 0.07864 0.0869 0.07017 0.1812 0.05667 2 19.69 21.25 130.00 1203.0 0.10960 0.15990 0.1974 0.12790 0.2069 0.05999 3 11.42 20.38 77.58 386.1 0.14250 0.28390 0.2414 0.10520 0.2597 0.09744 4 20.29 14.34 135.10 1297.0 0.10030 0.13280 0.1980 0.10430 0.1809 0.05883 Como no es buena pr\u00e1ctica tener espacios en los nombres de las columnas mejor los sustituyo por guiones bajos nuevos_nombres = [i.replace(' ', '_') for i in X.columns] X.columns = nuevos_nombres Observamos que todas las variables son de tipo num\u00e9rico X.dtypes.unique() array([dtype('float64')], dtype=object) A\u00f1adimos una variable ficticia de tipo texto para tener al menos una (a ver si acaba formando parte del modelo) X['variable_inventada'] = ['a']*(X.shape[0]//3) + ['b']*(X.shape[0]//3) + ['c']*(X.shape[0]//3) + ['d']*(X.shape[0] - 3*(X.shape[0]//3)) print('El dataset tiene {} filas y {} columnas'.format(X.shape[0], X.shape[1])) El dataset tiene 569 filas y 31 columnas Aplicamos la clase scorecard para sacar el modelo autom\u00e1tico. Por defecto usa un stepwise con pvalores de umbral 0.01 (bueno para lidiar con variables correladas) modelo = pk.autoscorecard().fit(X, y) Particionado 70-30 estratificado en el target terminado. ------------------------------------------------------------------------------------------------------------------------------------------------------ Autogrouping terminado. M\u00e1ximo n\u00famero de buckets = 5. M\u00ednimo porcentaje por bucket = 0.05 ------------------------------------------------------------------------------------------------------------------------------------------------------ Step 01 | Time - 0:00:02.358428 | p-value = 4.93e-32 | Gini train = 83.97% | Gini test = 87.30% ---> Feature selected: mean_concavity Step 02 | Time - 0:00:02.510427 | p-value = 1.38e-14 | Gini train = 96.82% | Gini test = 97.24% ---> Feature selected: worst_perimeter Step 03 | Time - 0:00:03.422180 | p-value = 4.31e-06 | Gini train = 98.34% | Gini test = 98.07% ---> Feature selected: worst_texture Step 04 | Time - 0:00:02.215816 | p-value = 5.11e-04 | Gini train = 98.92% | Gini test = 97.06% ---> Feature selected: worst_smoothness Step 05 | Time - 0:00:02.350506 | p-value = 1.62e-03 | Gini train = 99.34% | Gini test = 98.51% ---> Feature selected: radius_error Step 05 | Time - 0:00:00.000000 | p-value = 1.54e-02 | Gini train = 99.25% | Gini test = 98.22% ---> Feature deleted : mean_concavity Step 06 | Time - 0:00:02.249762 | p-value = 2.28e-03 | Gini train = 99.60% | Gini test = 98.77% ---> Feature selected: worst_concavity ------------------------------------------------------------------------------------------------------------------------------------------------------ Ya ninguna variable tiene un p-valor < 0.01, detenemos el proceso. ------------------------------------------------------------------------------------------------------------------------------------------------------ Selecci\u00f3n terminada: ['worst_perimeter', 'worst_texture', 'worst_smoothness', 'radius_error', 'worst_concavity'] ------------------------------------------------------------------------------------------------------------------------------------------------------ El modelo tiene un 95.55% de KS y un 99.60% de Gini en la muestra de desarrollo ------------------------------------------------------------------------------------------------------------------------------------------------------ El modelo tiene un 95.63% de KS y un 98.77% de Gini en la muestra de validaci\u00f3n ------------------------------------------------------------------------------------------------------------------------------------------------------ Pintamos la scorecard con colorines pk.pretty_scorecard(modelo) #T_95fca_row0_col0, #T_95fca_row0_col1, #T_95fca_row0_col2, #T_95fca_row0_col3, #T_95fca_row0_col4, #T_95fca_row0_col5, #T_95fca_row0_col6, #T_95fca_row0_col7, #T_95fca_row0_col8, #T_95fca_row0_col9, #T_95fca_row0_col10, #T_95fca_row1_col0, #T_95fca_row1_col1, #T_95fca_row1_col2, #T_95fca_row1_col3, #T_95fca_row1_col4, #T_95fca_row1_col5, #T_95fca_row1_col6, #T_95fca_row1_col7, #T_95fca_row1_col8, #T_95fca_row1_col9, #T_95fca_row1_col10, #T_95fca_row2_col0, #T_95fca_row2_col1, #T_95fca_row2_col2, #T_95fca_row2_col3, #T_95fca_row2_col4, #T_95fca_row2_col5, #T_95fca_row2_col6, #T_95fca_row2_col7, #T_95fca_row2_col8, #T_95fca_row2_col9, #T_95fca_row2_col10, #T_95fca_row3_col0, #T_95fca_row3_col1, #T_95fca_row3_col2, #T_95fca_row3_col3, #T_95fca_row3_col4, #T_95fca_row3_col5, #T_95fca_row3_col6, #T_95fca_row3_col7, #T_95fca_row3_col8, #T_95fca_row3_col9, #T_95fca_row3_col10, #T_95fca_row9_col0, #T_95fca_row9_col1, #T_95fca_row9_col2, #T_95fca_row9_col3, #T_95fca_row9_col4, #T_95fca_row9_col5, #T_95fca_row9_col6, #T_95fca_row9_col7, #T_95fca_row9_col8, #T_95fca_row9_col9, #T_95fca_row9_col10, #T_95fca_row10_col0, #T_95fca_row10_col1, #T_95fca_row10_col2, #T_95fca_row10_col3, #T_95fca_row10_col4, #T_95fca_row10_col5, #T_95fca_row10_col6, #T_95fca_row10_col7, #T_95fca_row10_col8, #T_95fca_row10_col9, #T_95fca_row10_col10, #T_95fca_row11_col0, #T_95fca_row11_col1, #T_95fca_row11_col2, #T_95fca_row11_col3, #T_95fca_row11_col4, #T_95fca_row11_col5, #T_95fca_row11_col6, #T_95fca_row11_col7, #T_95fca_row11_col8, #T_95fca_row11_col9, #T_95fca_row11_col10, #T_95fca_row12_col0, #T_95fca_row12_col1, #T_95fca_row12_col2, #T_95fca_row12_col3, #T_95fca_row12_col4, #T_95fca_row12_col5, #T_95fca_row12_col6, #T_95fca_row12_col7, #T_95fca_row12_col8, #T_95fca_row12_col9, #T_95fca_row12_col10, #T_95fca_row13_col0, #T_95fca_row13_col1, #T_95fca_row13_col2, #T_95fca_row13_col3, #T_95fca_row13_col4, #T_95fca_row13_col5, #T_95fca_row13_col6, #T_95fca_row13_col7, #T_95fca_row13_col8, #T_95fca_row13_col9, #T_95fca_row13_col10, #T_95fca_row19_col0, #T_95fca_row19_col1, #T_95fca_row19_col2, #T_95fca_row19_col3, #T_95fca_row19_col4, #T_95fca_row19_col5, #T_95fca_row19_col6, #T_95fca_row19_col7, #T_95fca_row19_col8, #T_95fca_row19_col9, #T_95fca_row19_col10, #T_95fca_row20_col0, #T_95fca_row20_col1, #T_95fca_row20_col2, #T_95fca_row20_col3, #T_95fca_row20_col4, #T_95fca_row20_col5, #T_95fca_row20_col6, #T_95fca_row20_col7, #T_95fca_row20_col8, #T_95fca_row20_col9, #T_95fca_row20_col10, #T_95fca_row21_col0, #T_95fca_row21_col1, #T_95fca_row21_col2, #T_95fca_row21_col3, #T_95fca_row21_col4, #T_95fca_row21_col5, #T_95fca_row21_col6, #T_95fca_row21_col7, #T_95fca_row21_col8, #T_95fca_row21_col9, #T_95fca_row21_col10, #T_95fca_row22_col0, #T_95fca_row22_col1, #T_95fca_row22_col2, #T_95fca_row22_col3, #T_95fca_row22_col4, #T_95fca_row22_col5, #T_95fca_row22_col6, #T_95fca_row22_col7, #T_95fca_row22_col8, #T_95fca_row22_col9, #T_95fca_row22_col10, #T_95fca_row23_col0, #T_95fca_row23_col1, #T_95fca_row23_col2, #T_95fca_row23_col3, #T_95fca_row23_col4, #T_95fca_row23_col5, #T_95fca_row23_col6, #T_95fca_row23_col7, #T_95fca_row23_col8, #T_95fca_row23_col9, #T_95fca_row23_col10 { background-color: #CCFFCC; } #T_95fca_row4_col0, #T_95fca_row4_col1, #T_95fca_row4_col2, #T_95fca_row4_col3, #T_95fca_row4_col4, #T_95fca_row4_col5, #T_95fca_row4_col6, #T_95fca_row4_col7, #T_95fca_row4_col8, #T_95fca_row4_col9, #T_95fca_row4_col10, #T_95fca_row5_col0, #T_95fca_row5_col1, #T_95fca_row5_col2, #T_95fca_row5_col3, #T_95fca_row5_col4, #T_95fca_row5_col5, #T_95fca_row5_col6, #T_95fca_row5_col7, #T_95fca_row5_col8, #T_95fca_row5_col9, #T_95fca_row5_col10, #T_95fca_row6_col0, #T_95fca_row6_col1, #T_95fca_row6_col2, #T_95fca_row6_col3, #T_95fca_row6_col4, #T_95fca_row6_col5, #T_95fca_row6_col6, #T_95fca_row6_col7, #T_95fca_row6_col8, #T_95fca_row6_col9, #T_95fca_row6_col10, #T_95fca_row7_col0, #T_95fca_row7_col1, #T_95fca_row7_col2, #T_95fca_row7_col3, #T_95fca_row7_col4, #T_95fca_row7_col5, #T_95fca_row7_col6, #T_95fca_row7_col7, #T_95fca_row7_col8, #T_95fca_row7_col9, #T_95fca_row7_col10, #T_95fca_row8_col0, #T_95fca_row8_col1, #T_95fca_row8_col2, #T_95fca_row8_col3, #T_95fca_row8_col4, #T_95fca_row8_col5, #T_95fca_row8_col6, #T_95fca_row8_col7, #T_95fca_row8_col8, #T_95fca_row8_col9, #T_95fca_row8_col10, #T_95fca_row14_col0, #T_95fca_row14_col1, #T_95fca_row14_col2, #T_95fca_row14_col3, #T_95fca_row14_col4, #T_95fca_row14_col5, #T_95fca_row14_col6, #T_95fca_row14_col7, #T_95fca_row14_col8, #T_95fca_row14_col9, #T_95fca_row14_col10, #T_95fca_row15_col0, #T_95fca_row15_col1, #T_95fca_row15_col2, #T_95fca_row15_col3, #T_95fca_row15_col4, #T_95fca_row15_col5, #T_95fca_row15_col6, #T_95fca_row15_col7, #T_95fca_row15_col8, #T_95fca_row15_col9, #T_95fca_row15_col10, #T_95fca_row16_col0, #T_95fca_row16_col1, #T_95fca_row16_col2, #T_95fca_row16_col3, #T_95fca_row16_col4, #T_95fca_row16_col5, #T_95fca_row16_col6, #T_95fca_row16_col7, #T_95fca_row16_col8, #T_95fca_row16_col9, #T_95fca_row16_col10, #T_95fca_row17_col0, #T_95fca_row17_col1, #T_95fca_row17_col2, #T_95fca_row17_col3, #T_95fca_row17_col4, #T_95fca_row17_col5, #T_95fca_row17_col6, #T_95fca_row17_col7, #T_95fca_row17_col8, #T_95fca_row17_col9, #T_95fca_row17_col10, #T_95fca_row18_col0, #T_95fca_row18_col1, #T_95fca_row18_col2, #T_95fca_row18_col3, #T_95fca_row18_col4, #T_95fca_row18_col5, #T_95fca_row18_col6, #T_95fca_row18_col7, #T_95fca_row18_col8, #T_95fca_row18_col9, #T_95fca_row18_col10 { background-color: #FFFFFF; } Variable Group Count Percent Goods Bads Bad rate WoE IV Raw score Aligned score 0 worst_perimeter (-inf, 91.69) 167 0.419598 2 165 0.988024 -3.888550 2.513895 5.210485 -48 1 worst_perimeter [91.69, 102.05) 58 0.145729 5 53 0.913793 -1.836605 0.327313 2.460970 32 2 worst_perimeter [102.05, 114.65) 52 0.130653 23 29 0.557692 0.292447 0.011524 -0.391866 114 3 worst_perimeter [114.65, inf) 121 0.304020 118 3 0.024793 4.196321 3.295360 -5.622885 265 4 worst_texture (-inf, 23.35) 159 0.399497 19 140 0.880503 -1.472955 0.635759 2.334961 35 5 worst_texture [23.35, 28.24) 112 0.281407 54 58 0.517857 0.452790 0.060160 -0.717772 123 6 worst_texture [28.24, 29.23) 20 0.050251 5 15 0.750000 -0.574364 0.015058 0.910494 76 7 worst_texture [29.23, 31.17) 31 0.077889 26 5 0.161290 2.172907 0.338269 -3.444541 202 8 worst_texture [31.17, inf) 76 0.190955 44 32 0.421053 0.842702 0.142667 -1.335871 141 9 worst_smoothness (-inf, 0.10) 34 0.085427 1 33 0.970588 -2.972259 0.372255 6.443867 -83 10 worst_smoothness [0.10, 0.13) 130 0.326633 33 97 0.746154 -0.553955 0.091418 1.200976 68 11 worst_smoothness [0.13, 0.14) 63 0.158291 11 52 0.825397 -1.029100 0.137566 2.231092 38 12 worst_smoothness [0.14, 0.16) 114 0.286432 60 54 0.473684 0.629609 0.119251 -1.364995 142 13 worst_smoothness [0.16, inf) 57 0.143216 43 14 0.245614 1.646391 0.386146 -3.569382 206 14 radius_error (-inf, 0.24) 111 0.278894 6 105 0.945946 -2.337952 0.887158 3.846413 -8 15 radius_error [0.24, 0.41) 152 0.381910 35 117 0.769737 -0.682577 0.158026 1.122980 70 16 radius_error [0.41, 0.48) 32 0.080402 23 9 0.281250 1.462518 0.174633 -2.406144 172 17 radius_error [0.48, 0.56) 26 0.065327 12 14 0.538462 0.370098 0.009282 -0.608887 120 18 radius_error [0.56, inf) 77 0.193467 72 5 0.064935 3.191477 1.488781 -5.250637 254 19 worst_concavity (-inf, 0.21) 182 0.457286 4 178 0.978022 -3.271241 2.240711 2.492782 31 20 worst_concavity [0.21, 0.26) 39 0.097990 12 27 0.692308 -0.286682 0.007717 0.218460 96 21 worst_concavity [0.26, 0.29) 20 0.050251 14 6 0.300000 1.371547 0.096824 -1.045159 133 22 worst_concavity [0.29, 0.38) 53 0.133166 26 27 0.509434 0.486508 0.032925 -0.370734 113 23 worst_concavity [0.38, inf) 104 0.261307 92 12 0.115385 2.561131 1.469120 -1.951657 159","title":"Theory"}]}